#+title: Spack packages for Wire-Cell
#+options: toc:t

This repo holds a Spack ~wire-cell-toolkit/package.py~ and a few
additional Spack "recipes" to build WCT dependencies not already in
Spack.

It builds Wire-Cell Toolkit [[https://github.com/WireCell/wire-cell-toolkit/releases/tag/0.20.0][0.20.0]] and requires exactly [[https://github.com/spack/spack/releases/tag/v0.18.0][Spack 0.18.0]].
YMMV for any other mixes of versions.  It may be used to build a
development environment for newer versions of Wire-Cell Toolkit.

* Quick start

Here is one way to do it.

** Install Spack

#+begin_example
$ git clone -c feature.manyFiles=true https://github.com/spack/spack.git /srv/spack/local
$ cd /srv/spack/local
$ git checkout -b v0.18.0 v0.18.0
#+end_example

See [[https://spack.readthedocs.io/en/latest/getting_started.html#installation][Installation section of Spack docs]] for details and options.

** Set up spack

#+begin_example
$ bash --rcfile /srv/spack/local/share/spack/setup-env.sh
#+end_example

See [[https://spack.readthedocs.io/en/latest/getting_started.html#shell-support][Shell support section of the Spack docs]] for details and options.

** Add WCT Spack repo

#+begin_example
$ git clone https://github.com/WireCell/wire-cell-spack.git wct-spack
$ spack repo add wct-spack
#+end_example

** Install WCT

#+begin_example
$ spack install wire-cell-toolkit
#+end_example

This installs "core" code.  You may wish to install variants with more
features.  Discover variants with:

#+begin_example
$ spack info wire-cell-toolkit
#+end_example

For example:

#+begin_example
$ spack install wire-cell-toolkit+root
#+end_example

** WCT environment

#+begin_example
$ spack load wire-cell-toolkit
$ wire-cell --help
#+end_example

* Developer options

The above installation can be used for WCT development.  WCT's ~wcb~
tool can find many dependencies from the environment produced by ~spack
load~.  However, when things may go wrong the developer will need to
understand a large environment.  Instead, it is possible to rely on a
much smaller shell environment and provide a much simpler development
area.  More details below in [[View-based development environment]].

** WCT view

A "Spack view" aggregates the package build products via the file
system so that the far less environment settings are needed.

#+begin_example
$ spack view add -i myview wire-cell-toolkit
$ ls myview/
bin  etc  include  lib  libexec  man  pkg  sbin  share
#+end_example

You may now add the single entry ~myview/bin~ to ~$PATH~ and etc for other
~PATH~-like variables.

#+begin_example
## only needed if not using direnv
$ myview=$(pwd)/myview
$ export PATH=$myview/bin:$PATH
$ export MANPATH=$myview/man:$myview/share/man:$MANPATH
$ export LD_LIBRARY_PATH=$myview/lib:$LD_LIBRARY_PATH
$ export LIBRARY_PATH=$myview/lib:$LIBRARY_PATH
$ export PKG_CONFIG_PATH=$myview/share/pkgconfig:$myview/lib/pkgconfig
#+end_example

** A Spack view + ~direnv~

Though the above is fairly minimal, an even better way to manage these
environment settings with less configuration is to use [[https://direnv.net][direnv]].  After
making ~myview~ as above and without explicitly setting any variables:

#+begin_example
$ echo 'load_prefix myview' > .envrc
$ direnv allow
$ wire-cell --help
#+end_example


* Details

** More than one ~wire-cell-toolkit~ installed

Spack allows multiple packages of the same name to be installed.
Commands like ~spack load~ or ~spack view~ require a package to be
identified uniquely.  One way to do that is to specify the *version*
and/or set of *variants* for the desired package.  You can discover what
is available with:

#+begin_example
$ spack find -v wire-cell-toolkit
-- linux-debian11-haswell / gcc@10.2.1 --------------------------
wire-cell-toolkit@0.18.0~cppjsonnet~hdf~root+tbb
wire-cell-toolkit@0.18.0~cppjsonnet~hdf+root+tbb
wire-cell-toolkit@0.20.0~cppjsonnet+hdf+root+tbb
#+end_example

In this example, adding =+root= or =~root= is enough to make the name
unique.  You may test uniqueness, eg:

#+begin_example
$ spack find -v wire-cell-toolkit~root
==> 1 installed package
-- linux-debian11-haswell / gcc@10.2.1 --------------------------
wire-cell-toolkit@0.18.0~cppjsonnet~hdf~root+tbb
#+end_example

If specifying a version and variants are not enough to uniquely
determine a package then a "slash-hash" may be used.  To discover
these you may run:

#+begin_example
$ spack find -vl wire-cell-toolkit
==> 2 installed packages
-- linux-debian11-haswell / gcc@10.2.1 --------------------------
7rxgr7w wire-cell-toolkit@0.18.0~cppjsonnet~hdf~root+tbb
55c7krd wire-cell-toolkit@0.18.0~cppjsonnet~hdf+root+tbb
urqwjcm wire-cell-toolkit@0.20.0~cppjsonnet+hdf+root+tbb
#+end_example

And again to test a match:

#+begin_example
$ spack find -vl /55c7krd
==> 1 installed package
-- linux-debian11-haswell / gcc@10.2.1 --------------------------
55c7krd wire-cell-toolkit@0.18.0~cppjsonnet~hdf+root+tbb
#+end_example

** View-based development environment

This section describes how to create a development environment based
on a Spack view.  The view greatly simplifies how to configure WCT or
other package build systems to exploit Spack-built packages.

First, set up a view as described above.  It is recommended to also
use ~direnv~ to set the environment (again, as described above).

In addition, and just for abbreviation in what comes next, we define a
local environment variable pointing to the view directory:

#+begin_example
$ export myview=$(pwd)/myview
#+end_example

Next, get WCT source:

#+begin_example
$ git clone https://github.com/WireCell/wire-cell-toolkit.git
$ cd wire-cell-toolkit
#+end_example

We are now set to configure and build.  The view helps us here but
some packages do not provide ~pkg-config~ files and so WCT's ~wcb~ builder
needs to be told some details.

#+begin_example
$ ./wcb configure \
   --prefix=$myview \
   --with-jsonnet=$myview \
   --boost-mt --boost-libs=$myview/lib --boost-include=$myview/include
$ ./wcb install --notests
#+end_example

With the given ~--prefix=$myview~, this installs into the view.  It
overwrites (the symlinks to) the originally installed WCT files.  Thus
our development version is immediately available for use.

#+begin_example
$ wire-cell --version
0.18.0-5-g8513660
#+end_example

** Automate the above

With ~direnv~ and the patterns above assumed, this package provides
[[./scripts/wct-make-dev]] to lower the bar to making new working areas.
If it does not suit as is, you are encouraged to hack your own
version.

#+begin_example
$ ./scripts/wct-make-dev /path/to/work [<spec>]
$ ls -a /path/to/work
.  ..  .direnv  .envrc  local  python  toolkit
#+end_example

It will guess a new ~wire-cell-toolkit~ if ~<spec>~ is not given and produce:

- ~.direnv/~ direnv's area holding a Python virtual env.
- ~.envrc~ a direnv config file. 
- ~local/~ holding the Spack view.
- ~python/~ holding git clone of ~wire-cell-python~
- ~toolkit/~ holding git clone of ~wire-cell-toolkit~

At the end the script prints a few lines which can be copy-pasted to
build and install the latter two.  Eg:

#+begin_example
cd /path/to/work && direnv allow
bash -c "$WIRECELL_CONFIG" && bash -c "$WIRECELL_BUILD"
cd python && pip install -e . && cd -
#+end_example

After initial run, the ~.envrc~ file can be hacked on as needed.

** Using a Spack "scope"

To better keep multiple Spack instances you use separate, a Spack
"scope" may be used.  Some example ones are provided under [[file:./scopes/][scopes/]]
directory.

- ~debian/~ :: use Debian packages to provide packages otherwise built
  by Spack.  For use, see example [[scripts/wcspack]].

* More info

See also https://github.com/wirecell/wire-cell-spack-containers for
idea on how to make and use Docker and Singularity containers built
via ~wire-cell-spack~ methods.

